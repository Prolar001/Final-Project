1. Overview & Objectives
Over the next few weeks, you will design and build a simple web application that demonstrates 
your grasp of:  Frontend: UI implementation, responsive layout, client-side logic
 Backend: RESTful API or server-side routing, business logic
 Database: Schema design, data modeling, persistence
You may choose any frameworks or libraries you like (e.g. React, Vue, Angular, Svelte, 
Django, Express, Rails, Laravel, Flask, ASP.NET, etc.). You may even start from a template or
boilerplate (e.g. Create React App, Next.js starter, Django project template), provided you 
customize it to apply what we’ve covered in class.
The core requirement is that your system must include user authentication (sign-up, sign-in, 
sign-out), plus at least two CRUD features that tie together frontend, backend, and database.
2. Scope & Constraints
 Timeline: 21 calendar days
 Team: Maximum of 5 members per group.  Functionality:
o Authentication (mandatory): registration, login, logout, session or token 
handling.
o At least two distinct CRUD modules (e.g. posts, tasks, products, profiles).  Minimal UI/UX: focus on clear layouts and user flows—no need for heavy styling.  Templates: allowed as a starting point, but you must extend/customize them.
3. Deliverables
1. Code Repository:
o Public (GitHub, GitLab, etc.)
o Clean commit history with meaningful messages
2. Documentation (Markdown or PDF):
o Project Overview: Purpose, chosen tech stack, architecture diagram (high level).
o ERD: Entity-Relationship Diagram of your database.
o Database Schemas: Table/collection definitions, fields, types, relationships.
o API Spec: List of endpoints (HTTP method, URL, request/response schema).
o Authentication Flow: Sequence diagram or step-by-step of login/signup.
o Setup Guide:  Prerequisites (Node, Python, etc.)  Installation and run commands
 Environment variables (e.g. .env example)
o Usage Guide: How to log in, create/read/update/delete data.
o Testing (optional but encouraged): Unit tests or API tests, plus instructions to run 
them.
3. Live Demo (if possible):
o Video run through of the system.
4. Evaluation Criteria
Category Weight Notes
Authentication 25% Correct workflow, security best practices
Data Modeling 20% ERD clarity, normalization, relationships
API & Backend 20% RESTful design or equivalent, error handling
Frontend 15% Usability, responsiveness, code organization
Documentation 15% Completeness, clarity, accuracy
Deployment/Demo 5% Live demo or equivalent evidence
5. Tips & Best Practices
 Keep it simple: Two well-built features beat ten half-finished ones.  Use environment variables for secrets (don’t commit them!).  Validate inputs both client- and server-side.  Protect authenticated routes with middleware or guards.  Commit early and often—small, descriptive commits make your work easier to review.
 Peer review your partner’s code (if in a pair) before merging.
6. Submission
1. Git URL to your repo
2. Documentation file link (e.g. docs/PROJECT_DOC.md)
3. Live Demo URL or ZIP of project directory
4. A short pres